Attempted to log "Response {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          decoder: [StringDecoder],
          encoding: 'utf8',
          [Symbol(kPaused)]: false
        },
        readable: false,
        _events: [Object: null prototype] {
          end: [Array],
          data: [Array],
          error: [Array],
          close: [Function: bound emit]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: null,
          _readableState: [ReadableState],
          readable: true,
          _events: [Object: null prototype],
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: [WritableState],
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [ClientRequest],
          [Symbol(asyncId)]: 1226,
          [Symbol(kHandle)]: [TCP],
          [Symbol(kSetNoDelay)]: true,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        connection: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: null,
          _readableState: [ReadableState],
          readable: true,
          _events: [Object: null prototype],
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: [WritableState],
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [ClientRequest],
          [Symbol(asyncId)]: 1226,
          [Symbol(kHandle)]: [TCP],
          [Symbol(kSetNoDelay)]: true,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          'x-powered-by': 'Express',
          'content-type': 'application/json',
          date: 'Wed, 09 Jun 2021 10:21:53 GMT',
          connection: 'close',
          'transfer-encoding': 'chunked'
        },
        rawHeaders: [
          'X-Powered-By',
          'Express',
          'Content-Type',
          'application/json',
          'Date',
          'Wed, 09 Jun 2021 10:21:53 GMT',
          'Connection',
          'close',
          'Transfer-Encoding',
          'chunked'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 500,
        statusMessage: 'Server Error',
        client: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: null,
          _readableState: [ReadableState],
          readable: true,
          _events: [Object: null prototype],
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: [WritableState],
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [ClientRequest],
          [Symbol(asyncId)]: 1226,
          [Symbol(kHandle)]: [TCP],
          [Symbol(kSetNoDelay)]: true,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: ClientRequest {
          _events: [Object: null prototype],
          _eventsCount: 3,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: false,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: 0,
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          socket: [Socket],
          connection: [Socket],
          _header: 'GET /dashboard HTTP/1.1\r\n' +
            'Host: 127.0.0.1:45069\r\n' +
            'Accept-Encoding: gzip, deflate\r\n' +
            'Cookie: auth-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkFsaUJha2VyU2FydGF3aSIsImlhdCI6MTYyMzIzMTc3Nn0.N6YI2wK3y2zRjc8fvaQpbXy-bSa9sih42y981-56ySc\r\n' +
            'Connection: close\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: noopPendingOutput],
          agent: [Agent],
          socketPath: undefined,
          method: 'GET',
          insecureHTTPParser: undefined,
          path: '/dashboard',
          _ended: true,
          res: [Circular],
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: '127.0.0.1',
          protocol: 'http:',
          [Symbol(kCapture)]: false,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype]
        },
        text: '{"error":"INVALID LOGIN"}',
        [Symbol(kCapture)]: false
      },
      request: Test {
        _events: [Object: null prototype] { abort: [Function] },
        _eventsCount: 1,
        _maxListeners: undefined,
        _enableHttp2: false,
        _agent: false,
        _formData: null,
        method: 'GET',
        url: 'http://127.0.0.1:45069/dashboard',
        _header: {
          cookie: 'auth-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkFsaUJha2VyU2FydGF3aSIsImlhdCI6MTYyMzIzMTc3Nn0.N6YI2wK3y2zRjc8fvaQpbXy-bSa9sih42y981-56ySc'
        },
        header: {
          Cookie: 'auth-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkFsaUJha2VyU2FydGF3aSIsImlhdCI6MTYyMzIzMTc3Nn0.N6YI2wK3y2zRjc8fvaQpbXy-bSa9sih42y981-56ySc'
        },
        writable: true,
        _redirects: 0,
        _maxRedirects: 0,
        cookies: '',
        qs: {},
        _query: [],
        qsRaw: [],
        _redirectList: [],
        _streamRequest: false,
        _buffer: true,
        app: Server {
          insecureHTTPParser: undefined,
          _events: [Object: null prototype],
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 0,
          _handle: null,
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          _connectionKey: '6::::0',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(asyncId)]: 1223
        },
        _asserts: [],
        _server: Server {
          insecureHTTPParser: undefined,
          _events: [Object: null prototype],
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 0,
          _handle: null,
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          _connectionKey: '6::::0',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(asyncId)]: 1223
        },
        req: ClientRequest {
          _events: [Object: null prototype],
          _eventsCount: 3,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: false,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: 0,
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          socket: [Socket],
          connection: [Socket],
          _header: 'GET /dashboard HTTP/1.1\r\n' +
            'Host: 127.0.0.1:45069\r\n' +
            'Accept-Encoding: gzip, deflate\r\n' +
            'Cookie: auth-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkFsaUJha2VyU2FydGF3aSIsImlhdCI6MTYyMzIzMTc3Nn0.N6YI2wK3y2zRjc8fvaQpbXy-bSa9sih42y981-56ySc\r\n' +
            'Connection: close\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: noopPendingOutput],
          agent: [Agent],
          socketPath: undefined,
          method: 'GET',
          insecureHTTPParser: undefined,
          path: '/dashboard',
          _ended: true,
          res: [IncomingMessage],
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: '127.0.0.1',
          protocol: 'http:',
          [Symbol(kCapture)]: false,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype]
        },
        protocol: 'http:',
        host: '127.0.0.1:45069',
        _endCalled: true,
        _callback: [Function],
        _fullfilledPromise: Promise { [Circular] },
        res: IncomingMessage {
          _readableState: [ReadableState],
          readable: false,
          _events: [Object: null prototype],
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: [Socket],
          connection: [Socket],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: [Object],
          rawHeaders: [Array],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 500,
          statusMessage: 'Server Error',
          client: [Socket],
          _consuming: false,
          _dumped: false,
          req: [ClientRequest],
          text: '{"error":"INVALID LOGIN"}',
          [Symbol(kCapture)]: false
        },
        _resBuffered: true,
        response: [Circular],
        called: true,
        [Symbol(kCapture)]: false
      },
      req: ClientRequest {
        _events: [Object: null prototype] {
          drain: [Function],
          error: [Function],
          prefinish: [Function: requestOnPrefinish]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: null,
          _readableState: [ReadableState],
          readable: true,
          _events: [Object: null prototype],
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: [WritableState],
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 1226,
          [Symbol(kHandle)]: [TCP],
          [Symbol(kSetNoDelay)]: true,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        connection: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: null,
          _readableState: [ReadableState],
          readable: true,
          _events: [Object: null prototype],
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: [WritableState],
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 1226,
          [Symbol(kHandle)]: [TCP],
          [Symbol(kSetNoDelay)]: true,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _header: 'GET /dashboard HTTP/1.1\r\n' +
          'Host: 127.0.0.1:45069\r\n' +
          'Accept-Encoding: gzip, deflate\r\n' +
          'Cookie: auth-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkFsaUJha2VyU2FydGF3aSIsImlhdCI6MTYyMzIzMTc3Nn0.N6YI2wK3y2zRjc8fvaQpbXy-bSa9sih42y981-56ySc\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: noopPendingOutput],
        agent: Agent {
          _events: [Object: null prototype],
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object],
          requests: {},
          sockets: [Object],
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          scheduling: 'fifo',
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'GET',
        insecureHTTPParser: undefined,
        path: '/dashboard',
        _ended: true,
        res: IncomingMessage {
          _readableState: [ReadableState],
          readable: false,
          _events: [Object: null prototype],
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: [Socket],
          connection: [Socket],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: [Object],
          rawHeaders: [Array],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 500,
          statusMessage: 'Server Error',
          client: [Socket],
          _consuming: false,
          _dumped: false,
          req: [Circular],
          text: '{"error":"INVALID LOGIN"}',
          [Symbol(kCapture)]: false
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: '127.0.0.1',
        protocol: 'http:',
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          host: [Array],
          'accept-encoding': [Array],
          cookie: [Array]
        }
      },
      text: '{"error":"INVALID LOGIN"}',
      body: { error: 'INVALID LOGIN' },
      files: undefined,
      buffered: true,
      headers: {
        'x-powered-by': 'Express',
        'content-type': 'application/json',
        date: 'Wed, 09 Jun 2021 10:21:53 GMT',
        connection: 'close',
        'transfer-encoding': 'chunked'
      },
      header: {
        'x-powered-by': 'Express',
        'content-type': 'application/json',
        date: 'Wed, 09 Jun 2021 10:21:53 GMT',
        connection: 'close',
        'transfer-encoding': 'chunked'
      },
      statusCode: 500,
      status: 500,
      statusType: 5,
      info: false,
      ok: false,
      redirect: false,
      clientError: false,
      serverError: true,
      error: Error: cannot GET /dashboard (500)
          at Response.toError (/home/alibaker/coding/401/spaghetti-code/node_modules/superagent/src/node/response.js:95:15)
          at Response._setStatusProperties (/home/alibaker/coding/401/spaghetti-code/node_modules/superagent/src/response-base.js:126:48)
          at new Response (/home/alibaker/coding/401/spaghetti-code/node_modules/superagent/src/node/response.js:41:8)
          at Test._emitResponse (/home/alibaker/coding/401/spaghetti-code/node_modules/superagent/src/node/index.js:928:20)
          at fn (/home/alibaker/coding/401/spaghetti-code/node_modules/superagent/src/node/index.js:1130:38)
          at IncomingMessage.<anonymous> (/home/alibaker/coding/401/spaghetti-code/node_modules/superagent/src/node/parsers/json.js:19:7)
          at IncomingMessage.emit (events.js:326:22)
          at endReadableNT (_stream_readable.js:1241:12)
          at processTicksAndRejections (internal/process/task_queues.js:84:21) {
        status: 500,
        text: '{"error":"INVALID LOGIN"}',
        method: 'GET',
        path: '/dashboard'
      },
      created: false,
      accepted: false,
      noContent: false,
      badRequest: false,
      unauthorized: false,
      notAcceptable: false,
      forbidden: false,
      notFound: false,
      unprocessableEntity: false,
      type: 'application/json',
      links: {},
      setEncoding: [Function: bound ],
      redirects: [],
      pipe: [Function],
      [Symbol(kCapture)]: false
    }".